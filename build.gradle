buildscript {
	repositories {
		jcenter()
		maven {
                url 'http://files.minecraftforge.net/maven'
        }
		maven {
                url 'https://plugins.gradle.org/m2/'
        }
	}
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.8'
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def buildnumber = System.getenv("BUILD_NUMBER")
def travisbuildnumber = (System.getenv("TRAVIS_BUILD_NUMBER") ?: -000).toInteger() + 00
version = "${minecraft_version}-${mod_version}.${buildnumber ?: travisbuildnumber}"
group= group_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id

def numina_version = (System.getenv("NUMINA_VERSION") ?:"1.4.0")

repositories {
	//JEI
	maven {
            url "http://dvs1.progwml6.com/files/maven"
	}
    mavenCentral()
}

dependencies {
    // compile against the JEI API
    deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}:api"

    compile group: 'com.google.guava', name: 'guava', version: '19.0'

    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${minecraft_version}:${jei_version}"
}

minecraft {
    version = minecraft_version + "-" + forge_version// + "-" + "1.10.0"
    runDir = "run"
    mappings = mcp_mappings
    replace "@numina_version@", numina_version
    replace "@VERSION@", project.version
    useDepAts = true
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    // Move access transformers to META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    manifest {
        attributes 'FMLAT': 'numina_at.cfg'
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives devJar
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(sourceSets.main.resources.srcDirs){
        include 'mps-vanilla.recipes'
//        include 'mps-thermalexpansion.recipes'
        include 'mps-ic2.recipes'
        include 'mps-enderio.recipes'
    }
}

def getGitChangelog = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        def gitHash = System.getenv("GIT_COMMIT")
        def gitPrevHash = System.getenv("GIT_PREVIOUS_COMMIT")
        if(gitHash && gitPrevHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:%s - %aN', '' + gitPrevHash + '...' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else {
            return "";
        }
    } catch(ignored) {
        return "";
    }
}

build.dependsOn(copyToLib)

curseforge {
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''
    def branch = System.getenv("GIT_BRANCH")

  project {
    id = '235442'
    changelog = getGitChangelog()
    addGameVersion '1.10.2'
    //relatedProject 'numina': 'requiredLibrary'

    if(branch == null) {
        releaseType = 'alpha'
    } else if(branch.equals("origin/experimental")) {
        releaseType = 'beta'
    } else if(branch.equals("origin/master")) {
        releaseType = 'release'
    } else {
        releaseType = 'alpha'
    }    
  }    
}

idea {
    module {
        inheritOutputDirs = true
    }
}
